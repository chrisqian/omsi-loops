:root {
    --absence-text: "absent";
}

ul + .button {
    margin-top:4px;
}

.elementList {
    padding-left: .5rem;
    font-weight: bold;
    font-size: 1.25rem;
}

.elementList > * > fieldset {
    font-size: 1rem;
    font-weight: normal;
    margin-bottom: 1lh;
}

fieldset > * {
    display: block;
    margin: 0.25lh 0 0;
}

.fieldrow {
    display: flex;
    flex-wrap: wrap;
    gap: 1em;
    align-content: stretch;
    justify-content: stretch;
}

.fieldrow > label {
    flex: 1 0 min-content;
    display: flex;
    align-items: baseline;
    white-space: nowrap;
    gap: 0.5em;
}

.fieldrow > label > * {
    flex: 1 0 min-content;
}

reorderable-list:not(:has(>list-item)) {
    min-height: 1lh;
    max-width: 20em;
    box-sizing: border-box;
    border: 1px dashed currentColor;
    margin: 0 0 4px;
}

.actionDefinition:not([data-action-type="normal"]) .normalOnly,
.actionDefinition:not([data-action-type="limited"]) .limitedOnly,
.actionDefinition:not([data-action-type="progress"]) .progressOnly,
.actionDefinition:not([data-action-type="multipart"]) .multipartOnly
{
    display: none;
}

.numericEvaluation > [value] ~ .baseValueCalculation {
    display: none;
}

list-item[optional]:not([present]) {
    list-style-type: disc;
    color: color-mix(in srgb, currentColor, transparent 50%);
    &>* {
        display:none;
    }
    &::part(default)::after {
        content: " (" var(--absence-text) ")";
    }
}

.evaluationRules {
    padding-left: 0;
}

list-item[dragging] {
    background: color-mix(in srgb, currentColor 20%, transparent);
    opacity: 0.75;
}

list-item:not([open]):has(>.evaluationRules > .evaluationRule)::part(default)::after {
    content: "(...)";
}

.conditionalEvaluation > .evaluationRules > .evaluationRule > .evaluationRuleType optgroup[label=Adjustments] {
    display: none;
}

.baseValueCalculation {
    display: inline-block;
}

/* Need to limit the specificity on these rules, thus the :where */
.evaluationRule > .evaluationRuleType ~ *:where(:not([slot=details])),
.baseValueCalculation > .baseValueType ~ *:where(:not([slot=details])) {
    display: none;
}
.skillName > shrink-wrap[name=skillName],
.buffName > shrink-wrap[name=buffName],
.actionName > shrink-wrap[name=actionName],
.functionName > shrink-wrap[name=functionName],
.varName > shrink-wrap[name=varName],
.adjustmentName > shrink-wrap[name=adjustmentName],
.prestigeBuffName > shrink-wrap[name=prestigeBuffName] {
    display: revert;
}

.evaluationRule.numericCondition > .numericTestType.numericTest1 {
    display: revert;
    &[value] ~ .numericTestValue.numericTest1 {
        display: revert;
    }
    &[value] ~ span.numericTestType.numericTest2:has(+.numericTest2[value]) {
        display: revert;
    }
    &[value] ~ shrink-wrap.numericTestType.numericTest2 {
        display: revert;
        &[value] ~ .numericTestValue.numericTest2 {
            display: revert;
        }
    }
}

.evaluationRule.numericEvaluation > [name=value] {
    display: revert;
}

.evaluationRule.skillMod > :is(.numericTestType, .numericTestValue) {
    display: revert;
}
.evaluationRule.skillMod > .skillModOnly {
    display: revert;
}
.evaluationRule.skillMod > select[name=numericTest1] > option:not([value=minExclusive]),
.evaluationRule.skillMod > select[name=numericTest2] > option:not([value=max]){
    display: none;
}

.shrink-wrapped.label {
    display: inline-block;
    min-width: 1ch;
    min-height: 1lh;
    padding: 1px;
    margin: 1px 0;
    text-decoration: dotted color-mix(in srgb, currentColor 75%, transparent) underline;
}
shrink-wrap:hover .shrink-wrapped.label {
    text-decoration: underline;
    background: color-mix(in srgb, currentColor 20%, transparent);
}

shrink-wrap:focus-within > .label {
    margin: 1px 2px;
}

.addRule::after {
    content: "Add adjustment/condition";
}
.evaluationRule:not(.numericEvaluation) > .addRule::after,
.conditionalEvaluation > .addRule::after {
    content: "Add condition";
}